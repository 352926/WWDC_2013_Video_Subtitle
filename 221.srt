WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:08.516 A:middle
[ Silence ]

00:00:09.016 --> 00:00:13.000 A:middle
[ Applause ]

00:00:14.716 --> 00:00:15.276 A:middle
&gt;&gt; Good afternoon.

00:00:17.136 --> 00:00:19.266 A:middle
Welcome to this WWDC session

00:00:19.266 --> 00:00:21.926 A:middle
on Advanced Techniques
with UIKit Dynamics.

00:00:23.026 --> 00:00:27.846 A:middle
We have a lot of content for
you today, mainly lines of code.

00:00:29.556 --> 00:00:30.346 A:middle
So let's get started.

00:00:32.055 --> 00:00:35.536 A:middle
We're going to start with a
very quick recap of dynamics,

00:00:36.086 --> 00:00:40.516 A:middle
architecture, and we're
going to explore more

00:00:40.516 --> 00:00:43.076 A:middle
of these combining behaviors ID.

00:00:44.006 --> 00:00:48.056 A:middle
And we're going to talk briefly
again about dynamic items,

00:00:48.376 --> 00:00:49.626 A:middle
custom by dynamic items.

00:00:49.656 --> 00:00:52.186 A:middle
And we have a quick example

00:00:52.186 --> 00:00:54.876 A:middle
about collection
view and dynamics.

00:00:55.436 --> 00:01:01.846 A:middle
And we will end with great
demo and architecture

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:55.436 --> 00:01:01.846 A:middle
And we will end with great
demo and architecture

00:01:01.956 --> 00:01:05.256 A:middle
about using view
controllers with dynamics.

00:01:06.406 --> 00:01:12.466 A:middle
So UIKit Dynamics, it's a
physics inspired animation

00:01:12.466 --> 00:01:13.796 A:middle
and interaction system.

00:01:15.756 --> 00:01:19.326 A:middle
Made to be composable,
combinable, reusable.

00:01:19.326 --> 00:01:24.606 A:middle
We try to use dynamics in
a way which is declarative.

00:01:25.476 --> 00:01:29.126 A:middle
You tell us what the
intent of the interaction is

00:01:29.456 --> 00:01:33.556 A:middle
and we will try to combine the
effect of all new behaviors

00:01:33.556 --> 00:01:35.106 A:middle
to animate things on screen.

00:01:35.626 --> 00:01:40.486 A:middle
Let me stress that this
does not, in anyway,

00:01:40.486 --> 00:01:43.906 A:middle
replace what we have to
day with Core Animation,

00:01:44.296 --> 00:01:46.786 A:middle
UIView animation,
or motion effects.

00:01:47.226 --> 00:01:52.456 A:middle
It is just a new tool for rich,
real-world like interactions.

00:01:53.976 --> 00:01:59.586 A:middle
So the base dynamics
architecture,

00:01:59.586 --> 00:02:04.226 A:middle
we have this DynamicAnimator
which gives us this context

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.586 --> 00:02:04.226 A:middle
we have this DynamicAnimator
which gives us this context

00:02:04.526 --> 00:02:08.545 A:middle
in which we associate
various behaviors

00:02:08.846 --> 00:02:13.106 A:middle
and we associate dynamic
items which are usually views

00:02:13.106 --> 00:02:15.376 A:middle
or collection view
layout attributes.

00:02:16.166 --> 00:02:20.016 A:middle
And the key thing here
is, an item might be part

00:02:20.086 --> 00:02:22.396 A:middle
of different behaviors
and we're going

00:02:22.396 --> 00:02:24.386 A:middle
to combine all these effects.

00:02:24.896 --> 00:02:27.666 A:middle
So let's talk about
UIDynamicAnimator.

00:02:29.726 --> 00:02:35.636 A:middle
So its main job is to track
behaviors and animated items.

00:02:36.416 --> 00:02:40.486 A:middle
And it wraps the underlying
physics engine we run for you.

00:02:41.036 --> 00:02:46.526 A:middle
What's interesting is, we try to
actually optimize that engine.

00:02:46.526 --> 00:02:49.526 A:middle
So if we detect that
the system is at rest,

00:02:49.836 --> 00:02:52.046 A:middle
we just stop and resume.

00:02:52.166 --> 00:02:56.536 A:middle
If you change anything like
changing the parameter on one

00:02:56.536 --> 00:02:59.096 A:middle
of your behavior, we
start the system again.

00:02:59.656 --> 00:03:01.426 A:middle
And you can actually
be notified.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.656 --> 00:03:01.426 A:middle
And you can actually
be notified.

00:03:02.406 --> 00:03:05.456 A:middle
We have a
UIDynamicAnimatorDelegate,

00:03:06.136 --> 00:03:10.176 A:middle
so you can implement methods
so you can know if we are

00:03:10.176 --> 00:03:14.006 A:middle
about to pause or
resume that system.

00:03:15.856 --> 00:03:20.596 A:middle
You can use a DynamicAnimator in
three modes basically with views

00:03:21.186 --> 00:03:22.536 A:middle
which is the common case.

00:03:22.666 --> 00:03:25.316 A:middle
In collection views--
collection view layout exactly,

00:03:25.896 --> 00:03:28.556 A:middle
and you can implement
your own dynamic item

00:03:28.696 --> 00:03:30.886 A:middle
to participate in dynamics.

00:03:31.296 --> 00:03:35.146 A:middle
So let's talk about
combining behaviors.

00:03:37.986 --> 00:03:43.846 A:middle
Combining behaviors is
interesting the underlying model

00:03:44.166 --> 00:03:47.926 A:middle
physics is in itself quite
good about combining things,

00:03:48.106 --> 00:03:49.926 A:middle
combine two forces
and you get a force.

00:03:50.486 --> 00:03:55.446 A:middle
And we mean on that,
we have this base class

00:03:55.446 --> 00:03:58.856 A:middle
UIDynamicBehavior
that you can subclass.

00:03:59.716 --> 00:04:04.596 A:middle
And one of few things we have
in this class is the ability

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.716 --> 00:04:04.596 A:middle
And one of few things we have
in this class is the ability

00:04:04.596 --> 00:04:06.756 A:middle
to add child behaviors,

00:04:07.446 --> 00:04:09.206 A:middle
which means that you
can use this class

00:04:10.066 --> 00:04:13.026 A:middle
to construct your own
high-level behaviors.

00:04:13.546 --> 00:04:20.185 A:middle
What's interesting here, if
you attach behavior directly

00:04:20.185 --> 00:04:26.056 A:middle
to the animator, or if you add
a child behavior to a behavior

00:04:26.576 --> 00:04:28.776 A:middle
and add this behavior
to the animator,

00:04:29.646 --> 00:04:30.596 A:middle
there is no difference.

00:04:31.046 --> 00:04:37.186 A:middle
There is no CPU cost or
any runtime difference

00:04:37.186 --> 00:04:38.416 A:middle
between these two approaches.

00:04:38.686 --> 00:04:41.976 A:middle
So there is no cost for
building your abstractions.

00:04:42.516 --> 00:04:46.516 A:middle
[ Pause ]

00:04:47.016 --> 00:04:49.816 A:middle
You can compose your
behaviors statically

00:04:50.136 --> 00:04:54.236 A:middle
like by defining your own
class, adding child behaviors

00:04:54.416 --> 00:04:59.636 A:middle
and then never changing these
behaviors again or dynamically

00:04:59.636 --> 00:05:01.996 A:middle
by adding and removing children

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.636 --> 00:05:01.996 A:middle
by adding and removing children

00:05:02.446 --> 00:05:04.756 A:middle
for a behavior or
from the animator.

00:05:05.646 --> 00:05:09.706 A:middle
So let's see a quick
example of that.

00:05:09.896 --> 00:05:15.026 A:middle
Let's say that I want to drag
with this real-world effect

00:05:15.426 --> 00:05:21.836 A:middle
of view and when my gesture
ends, I want to apply gravity

00:05:21.836 --> 00:05:24.746 A:middle
to get this bouncy
effect I love so much.

00:05:25.736 --> 00:05:28.796 A:middle
The initial setup was just
with a collision behavior

00:05:29.086 --> 00:05:32.336 A:middle
and that view added
to this behavior.

00:05:32.686 --> 00:05:38.176 A:middle
But when my gesture actually
begins, what I want to do is

00:05:38.176 --> 00:05:41.366 A:middle
to create a new behavior,
an attachment behavior,

00:05:42.016 --> 00:05:45.736 A:middle
add that to the animator.

00:05:46.306 --> 00:05:50.386 A:middle
And when I update-- when
my gesture is updated,

00:05:50.386 --> 00:05:56.286 A:middle
I just need to change
that attachment point

00:05:56.556 --> 00:06:00.126 A:middle
in my UIAttachmentBehavior
and it's going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:56.556 --> 00:06:00.126 A:middle
in my UIAttachmentBehavior
and it's going

00:06:00.126 --> 00:06:02.456 A:middle
to drag the view
as I would expect.

00:06:03.636 --> 00:06:09.956 A:middle
When I end this gesture,
what I just need to do is

00:06:09.956 --> 00:06:11.466 A:middle
to remove the attachment
behavior

00:06:12.276 --> 00:06:16.896 A:middle
and at the same time add the
same view to a gravity behavior.

00:06:17.966 --> 00:06:20.426 A:middle
A collision behavior is
still here, so we are going

00:06:20.426 --> 00:06:23.586 A:middle
to add this fall
and bounce effect.

00:06:24.206 --> 00:06:30.816 A:middle
That's a really interesting
concept and you can build a lot

00:06:30.816 --> 00:06:35.056 A:middle
of completely different
effects by combining behaviors.

00:06:36.066 --> 00:06:40.096 A:middle
For instance, that example I
was using in the first session,

00:06:40.626 --> 00:06:44.226 A:middle
a bounce effect is just gravity
and collision at the same time.

00:06:45.196 --> 00:06:47.496 A:middle
If I want to drag a
view and then at the end

00:06:47.496 --> 00:06:50.366 A:middle
of the gesture snap it
somewhere else in the screen,

00:06:51.236 --> 00:06:55.496 A:middle
I can use an attachment behavior
first and then a snap behavior.

00:06:55.496 --> 00:07:01.336 A:middle
Something like the Lock
Screen in iOS 7 can be built

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:55.496 --> 00:07:01.336 A:middle
Something like the Lock
Screen in iOS 7 can be built

00:07:01.336 --> 00:07:05.056 A:middle
as a combination of
collision, gravity,

00:07:05.436 --> 00:07:08.116 A:middle
attachment, and push behavior.

00:07:08.916 --> 00:07:10.916 A:middle
But you can imagine
many other things

00:07:12.186 --> 00:07:16.476 A:middle
like a magnet-like behavior
that you could build

00:07:16.476 --> 00:07:20.116 A:middle
from multiple UIPushBehaviors.

00:07:21.796 --> 00:07:24.816 A:middle
So I'd like to show
you a very quick demo

00:07:26.436 --> 00:07:32.196 A:middle
of the different feel
you can get by changing,

00:07:32.866 --> 00:07:34.736 A:middle
removing, and adding behaviors.

00:07:37.926 --> 00:07:47.626 A:middle
So a very interesting thing here
is the top right animator label

00:07:48.406 --> 00:07:51.076 A:middle
is turning green when
the animator is active.

00:07:51.536 --> 00:07:55.216 A:middle
I basically just implemented
this UIDynamicAnimatorDelegate

00:07:55.216 --> 00:07:58.316 A:middle
so we will know when the
animator actually stop

00:07:58.916 --> 00:07:59.706 A:middle
and start again.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:01.216 --> 00:08:03.866 A:middle
So I can just drag that view,

00:08:04.476 --> 00:08:06.776 A:middle
so it's not always a
behavior, just collisions.

00:08:07.556 --> 00:08:09.646 A:middle
So let's add gravity.

00:08:10.726 --> 00:08:16.606 A:middle
So now, when I actually move
this view, the effect is,

00:08:16.606 --> 00:08:18.706 A:middle
of course, completely different.

00:08:19.636 --> 00:08:24.326 A:middle
It's moving a little bit
too much, motion sickness

00:08:24.326 --> 00:08:27.336 A:middle
and that's something that I
would like to have in this demo.

00:08:29.006 --> 00:08:32.135 A:middle
So we're going to add
a UIDynamicItemBehavior

00:08:32.135 --> 00:08:36.186 A:middle
which is a way to set up
some low-level properties.

00:08:36.506 --> 00:08:40.586 A:middle
I'm going to set up
resistance which a way

00:08:40.586 --> 00:08:43.626 A:middle
to apply dumping on velocity.

00:08:43.626 --> 00:08:46.226 A:middle
So the feel is completely
different.

00:08:47.276 --> 00:08:51.966 A:middle
I could add a fourth
behavior going to the right,

00:08:52.366 --> 00:08:56.836 A:middle
an immediate instantaneous
impulse behavior

00:08:59.276 --> 00:09:02.096 A:middle
and keep my attachment behavior.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.276 --> 00:09:02.096 A:middle
and keep my attachment behavior.

00:09:02.096 --> 00:09:04.726 A:middle
So I see that this force is
a view that's ready to move

00:09:04.726 --> 00:09:07.146 A:middle
to the right, so
let's stop that.

00:09:09.506 --> 00:09:14.286 A:middle
And the other thing is I
could also change those

00:09:14.286 --> 00:09:18.876 A:middle
that are low-level property on
this view like the elasticity

00:09:19.776 --> 00:09:21.726 A:middle
which is the restitution
on collision.

00:09:22.526 --> 00:09:26.406 A:middle
So we have a view which
is obviously really happy

00:09:28.266 --> 00:09:28.776 A:middle
[laughter] to be here.

00:09:29.436 --> 00:09:32.186 A:middle
So let's just turn
off collisions

00:09:32.456 --> 00:09:34.706 A:middle
and that's the end of this demo.

00:09:35.516 --> 00:09:42.526 A:middle
[ Applause ]

00:09:43.026 --> 00:09:47.036 A:middle
And each section was just
really add or remove behavior.

00:09:48.296 --> 00:09:49.626 A:middle
So what do that means?

00:09:50.796 --> 00:09:54.596 A:middle
It means that the
effect you want is really

00:09:54.596 --> 00:09:56.576 A:middle
about building a behavior tree.

00:09:57.886 --> 00:10:03.226 A:middle
And the behavior tree can be
using predefined behaviors

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:57.886 --> 00:10:03.226 A:middle
And the behavior tree can be
using predefined behaviors

00:10:03.226 --> 00:10:03.976 A:middle
like a collision behavior.

00:10:04.056 --> 00:10:09.066 A:middle
But maybe your own behavior
is like a magnet-like behavior

00:10:09.066 --> 00:10:13.716 A:middle
or a drag behavior which are
going to be viewed on top

00:10:14.576 --> 00:10:16.336 A:middle
of these predefined behaviors.

00:10:16.756 --> 00:10:21.786 A:middle
And then you need to associate
items to these behaviors,

00:10:22.596 --> 00:10:24.346 A:middle
and that is something
that you can do

00:10:24.346 --> 00:10:27.646 A:middle
at your high-level
behavior API level.

00:10:28.336 --> 00:10:33.466 A:middle
You could directly add the same
items to predefined behaviors

00:10:33.776 --> 00:10:39.616 A:middle
or only add just one to
something just for a while

00:10:40.446 --> 00:10:41.796 A:middle
when I want to drag this item.

00:10:44.196 --> 00:10:45.656 A:middle
How do you build
your own behavior?

00:10:47.606 --> 00:10:50.066 A:middle
You just have to subclass
UIDynamicBehavior.

00:10:53.396 --> 00:10:56.666 A:middle
And let's say I want
to implement, again,

00:10:57.176 --> 00:10:58.846 A:middle
this BouncyFallBehavior.

00:10:59.986 --> 00:11:02.966 A:middle
I'm going to define
initWithItem initializer.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.986 --> 00:11:02.966 A:middle
I'm going to define
initWithItem initializer.

00:11:02.966 --> 00:11:05.826 A:middle
Who do I implement that?

00:11:07.196 --> 00:11:08.636 A:middle
The firs thing I need is

00:11:08.636 --> 00:11:12.936 A:middle
to actually create
the sub-behaviors

00:11:13.676 --> 00:11:15.316 A:middle
for my high-level behaviors,

00:11:15.316 --> 00:11:16.996 A:middle
so I need gravity
on collisions here.

00:11:17.756 --> 00:11:22.806 A:middle
If needed, I will configure
this collision behavior.

00:11:23.366 --> 00:11:30.326 A:middle
And the last thing is adding
these two behaviors I just

00:11:30.326 --> 00:11:33.546 A:middle
created as children to myself.

00:11:34.166 --> 00:11:36.116 A:middle
And that's it.

00:11:36.566 --> 00:11:42.506 A:middle
When I need to use my high-level
behavior, I am just going

00:11:42.506 --> 00:11:46.566 A:middle
to actually add alloc
init, that new behavior

00:11:47.146 --> 00:11:49.416 A:middle
and add it to my animator.

00:11:50.516 --> 00:11:53.776 A:middle
[ Pause ]

00:11:54.276 --> 00:11:56.356 A:middle
So something which is useful

00:11:56.356 --> 00:11:58.476 A:middle
when you're building
your own behavior is

00:11:59.076 --> 00:12:00.756 A:middle
to think in terms of API.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.076 --> 00:12:00.756 A:middle
to think in terms of API.

00:12:02.236 --> 00:12:08.466 A:middle
What is the API you want define
on such an interaction behavior?

00:12:09.046 --> 00:12:11.656 A:middle
If there is something really
simple like initWithItems,

00:12:12.306 --> 00:12:16.226 A:middle
like what we did just a minute
ago, and we'll see other example

00:12:16.256 --> 00:12:19.776 A:middle
in this session when you
can actually define a more

00:12:19.776 --> 00:12:21.236 A:middle
complex API.

00:12:21.746 --> 00:12:25.376 A:middle
If you sort of think about
all that is going to integrate

00:12:25.376 --> 00:12:27.586 A:middle
with your existing
application flow,

00:12:28.216 --> 00:12:31.216 A:middle
like if you already
have a gesture,

00:12:31.466 --> 00:12:32.396 A:middle
it's always a good thing

00:12:32.396 --> 00:12:34.926 A:middle
to match the ending
gesture velocity

00:12:34.926 --> 00:12:37.616 A:middle
with the system you're
creating in dynamics.

00:12:38.616 --> 00:12:43.156 A:middle
And if you need that,
it's not always the case,

00:12:43.156 --> 00:12:46.996 A:middle
but if you need that, you can
define first step actions.

00:12:47.426 --> 00:12:52.656 A:middle
It's just a block, you can
define UIDynamicBehavior

00:12:53.466 --> 00:12:59.236 A:middle
and we're going to invoke that
block with each simulation step.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.116 --> 00:13:02.706 A:middle
So that's interesting when
you want to, for instance,

00:13:03.106 --> 00:13:08.066 A:middle
change the force based
on an item position,

00:13:08.836 --> 00:13:10.526 A:middle
to implement magnets
for instance.

00:13:11.196 --> 00:13:13.136 A:middle
Of course, because
we are running

00:13:13.136 --> 00:13:17.156 A:middle
that with each simulation
pick, you have to be careful

00:13:17.186 --> 00:13:20.726 A:middle
about what we do-- what
you do in this block.

00:13:22.296 --> 00:13:27.906 A:middle
There is one catch about
combining behaviors,

00:13:28.986 --> 00:13:32.746 A:middle
it's this UIDynamicItemBehavior
class,

00:13:32.776 --> 00:13:36.876 A:middle
you can use to setup
properties to your items.

00:13:37.326 --> 00:13:42.106 A:middle
With UIDynamicItemBehavior, you
can change density, dumping,

00:13:42.106 --> 00:13:46.026 A:middle
you can block rotation, you can
change friction or elasticity,

00:13:46.026 --> 00:13:49.136 A:middle
and I want you to think of
that in my previous demo.

00:13:49.806 --> 00:13:52.396 A:middle
And there is no problem

00:13:52.396 --> 00:13:56.976 A:middle
about combining many
UIDynamicItemBehavior,

00:13:57.566 --> 00:13:59.046 A:middle
especially if you are using--

00:13:59.486 --> 00:14:02.916 A:middle
if you're configuring
distinct properties in each,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.486 --> 00:14:02.916 A:middle
if you're configuring
distinct properties in each,

00:14:03.066 --> 00:14:05.706 A:middle
because that's not going
to conflict, right?

00:14:06.596 --> 00:14:10.476 A:middle
If you do want to
change the same property

00:14:11.386 --> 00:14:13.446 A:middle
in different
UIDynamicItemBehavior,

00:14:14.386 --> 00:14:15.326 A:middle
that's still possible,

00:14:16.376 --> 00:14:19.306 A:middle
but we have to decide
which one we pick.

00:14:20.306 --> 00:14:21.586 A:middle
And the last one wins.

00:14:22.116 --> 00:14:25.516 A:middle
We actually have quite
a precise definition

00:14:25.516 --> 00:14:27.276 A:middle
of what the last one is.

00:14:27.816 --> 00:14:32.206 A:middle
It's a pre-order depth first
walk of the behavior tree.

00:14:33.126 --> 00:14:39.556 A:middle
Get it? Let's check that
rule on an example, right?

00:14:40.366 --> 00:14:42.256 A:middle
So here is my behavior tree.

00:14:43.876 --> 00:14:47.116 A:middle
I have a few behavior
I don't care about

00:14:47.526 --> 00:14:49.626 A:middle
and three
UIDynamincItemBehaviors.

00:14:50.386 --> 00:14:52.656 A:middle
Configuring elasticity
and friction,

00:14:53.616 --> 00:14:58.056 A:middle
but the question is what
are the actual venues

00:14:59.766 --> 00:15:01.506 A:middle
in my dynamic item?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.766 --> 00:15:01.506 A:middle
in my dynamic item?

00:15:02.716 --> 00:15:05.886 A:middle
So let's walk the behavior tree.

00:15:06.996 --> 00:15:08.596 A:middle
We start with default.

00:15:10.036 --> 00:15:12.856 A:middle
So first behavior is not
a dynamic item behavior,

00:15:13.386 --> 00:15:14.066 A:middle
so we don't care.

00:15:15.396 --> 00:15:16.956 A:middle
That one, we don't care.

00:15:18.096 --> 00:15:18.966 A:middle
That one is interesting,

00:15:18.966 --> 00:15:22.406 A:middle
that's the first
UIDynamicItemBehavior we have

00:15:22.606 --> 00:15:24.136 A:middle
in this tree walk.

00:15:24.576 --> 00:15:26.916 A:middle
Elasticity is 0.5.

00:15:27.406 --> 00:15:31.396 A:middle
That is new-- the new elasticity
value for that dynamic item.

00:15:33.366 --> 00:15:36.506 A:middle
Next behavior, we continue.

00:15:37.066 --> 00:15:40.856 A:middle
That's another dynamic item
behavior, defining friction,

00:15:40.856 --> 00:15:42.946 A:middle
so that's not the same
property so that's OK.

00:15:43.696 --> 00:15:46.186 A:middle
We just set the friction
to be 0.2.

00:15:47.376 --> 00:15:52.606 A:middle
And then, so last dynamic item
behavior we have is setting

00:15:52.606 --> 00:15:54.756 A:middle
elasticity to 0.3.

00:15:55.106 --> 00:15:57.056 A:middle
That is the N value.

00:15:58.796 --> 00:16:03.146 A:middle
Then now, let's actually
remove this one.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.796 --> 00:16:03.146 A:middle
Then now, let's actually
remove this one.

00:16:03.746 --> 00:16:08.046 A:middle
In this case, we
are basically going

00:16:08.046 --> 00:16:13.886 A:middle
to reevaluate the behavior tree
and friction is back to default.

00:16:15.216 --> 00:16:20.626 A:middle
Let's add at the exact same
place a UIDynamicItemBehavior

00:16:21.356 --> 00:16:23.456 A:middle
changing again the
same property.

00:16:24.456 --> 00:16:28.936 A:middle
The new value is
actually still 0.3.

00:16:29.626 --> 00:16:34.176 A:middle
So that's the last, it's the
most recent behavior I added,

00:16:34.836 --> 00:16:37.726 A:middle
but that's not the last
in this behavior tree

00:16:38.006 --> 00:16:39.276 A:middle
with my definition.

00:16:39.986 --> 00:16:43.246 A:middle
So that is how you
can combine behavior

00:16:43.246 --> 00:16:45.676 A:middle
and have in a very define way.

00:16:46.476 --> 00:16:59.416 A:middle
Dynamic Items, so that's a
protocol and that's a way

00:16:59.416 --> 00:17:03.536 A:middle
to integrate in dynamics things
that are not necessary views

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.416 --> 00:17:03.536 A:middle
to integrate in dynamics things
that are not necessary views

00:17:03.846 --> 00:17:05.646 A:middle
or collection view
layout attributes.

00:17:07.856 --> 00:17:11.476 A:middle
It basically defines
what we need in UIKit

00:17:12.205 --> 00:17:18.486 A:middle
to animate something, so
that's a position, a size,

00:17:19.636 --> 00:17:23.736 A:middle
and a rotation knowing
that UIView

00:17:23.736 --> 00:17:29.056 A:middle
on UICollectionView obviously
implement already something

00:17:30.006 --> 00:17:31.206 A:middle
like that.

00:17:31.426 --> 00:17:34.636 A:middle
And we only care
about 2D rotation.

00:17:35.286 --> 00:17:38.086 A:middle
The engine we run
is a 2D engine.

00:17:39.776 --> 00:17:46.196 A:middle
So when you are defining
your own UIDynamicItem,

00:17:47.346 --> 00:17:51.546 A:middle
the first time this item
is added to a behavior,

00:17:52.276 --> 00:17:54.806 A:middle
and that behavior is
added to the animator,

00:17:55.776 --> 00:17:58.326 A:middle
we would get these
values, because we need

00:17:58.326 --> 00:18:01.866 A:middle
to inject an initial
state in the engine.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.326 --> 00:18:01.866 A:middle
to inject an initial
state in the engine.

00:18:02.476 --> 00:18:06.216 A:middle
Then we're going to
run the simulation

00:18:06.216 --> 00:18:08.896 A:middle
and each simulation pick,

00:18:10.076 --> 00:18:13.886 A:middle
we're going to write
position and rotation.

00:18:14.976 --> 00:18:18.826 A:middle
We don't change the size
of the dynamic item.

00:18:20.976 --> 00:18:23.426 A:middle
If you're implementing
that protocol, of course,

00:18:24.586 --> 00:18:31.126 A:middle
we might write position and
angle on each simulation pick.

00:18:31.516 --> 00:18:36.966 A:middle
So, again, that is two methods
where you should be careful

00:18:36.966 --> 00:18:39.416 A:middle
about your performance.

00:18:45.066 --> 00:18:48.976 A:middle
One consequence of
that is we won't care

00:18:48.976 --> 00:18:52.486 A:middle
about any external
change to this value

00:18:53.396 --> 00:18:55.896 A:middle
after we basically
grab the initial state.

00:18:57.526 --> 00:19:02.756 A:middle
So one interesting question
is how do you change the size

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.526 --> 00:19:02.756 A:middle
So one interesting question
is how do you change the size

00:19:03.216 --> 00:19:04.246 A:middle
of something after the effect?

00:19:05.226 --> 00:19:09.666 A:middle
We don't change views,
items, bodies in the engine,

00:19:09.666 --> 00:19:13.126 A:middle
so you have two ways to
change the size of an item,

00:19:13.166 --> 00:19:19.136 A:middle
remove it from dynamics,
and add it again later

00:19:19.136 --> 00:19:21.306 A:middle
if you want, or cheat.

00:19:23.096 --> 00:19:26.986 A:middle
For instance, if what you're
animating is a view of something

00:19:26.986 --> 00:19:30.996 A:middle
on the screen, you can define a
subview, apply a scale transform

00:19:30.996 --> 00:19:37.896 A:middle
or change the size of the
subview or something like that.

00:19:38.116 --> 00:19:41.296 A:middle
Again, we need an initial state,

00:19:41.806 --> 00:19:44.926 A:middle
we need to correct the initial
state, so we need a size

00:19:46.306 --> 00:19:47.976 A:middle
and we need reasonable position.

00:19:48.366 --> 00:19:51.556 A:middle
As I said, [inaudible] is
not a reasonable position.

00:19:53.946 --> 00:19:55.106 A:middle
What can you do with that?

00:19:55.596 --> 00:19:59.936 A:middle
One interesting use case for
dynamic items is to sanitize

00:19:59.936 --> 00:20:03.006 A:middle
or change the value we sent.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.936 --> 00:20:03.006 A:middle
or change the value we sent.

00:20:05.006 --> 00:20:06.816 A:middle
You can use a single
dynamic item

00:20:06.986 --> 00:20:10.976 A:middle
to actually animate the same
way many different things.

00:20:11.506 --> 00:20:16.756 A:middle
You can map position
or rotation,

00:20:16.756 --> 00:20:20.556 A:middle
which are the only two values
we compute to something else,

00:20:20.866 --> 00:20:25.506 A:middle
like mapping to scale
transform or instead

00:20:25.506 --> 00:20:30.256 A:middle
of animating a rotation,
animating a 3D effect.

00:20:31.586 --> 00:20:37.486 A:middle
So if you need to animate
something which is not a view

00:20:38.286 --> 00:20:40.066 A:middle
or a collection view
layout attribute,

00:20:40.796 --> 00:20:44.766 A:middle
do not define a view
hierarchy on this side just

00:20:44.766 --> 00:20:46.166 A:middle
to be able to use dynamics.

00:20:46.986 --> 00:20:48.276 A:middle
Use a dynamic item.

00:20:48.276 --> 00:20:55.176 A:middle
So let me introduce a really
stupid example of dynamic item

00:20:56.076 --> 00:20:58.396 A:middle
which doesn't display
anything on screen, well,

00:20:59.146 --> 00:21:01.046 A:middle
depends on what you
call screen actually.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.146 --> 00:21:01.046 A:middle
depends on what you
call screen actually.

00:21:03.526 --> 00:21:05.346 A:middle
You could just log
what we compute.

00:21:06.086 --> 00:21:07.516 A:middle
You could keep everything
in a dictionary.

00:21:07.516 --> 00:21:09.986 A:middle
You can do whatever
you want with that.

00:21:12.746 --> 00:21:15.916 A:middle
Let's talk about
collection view.

00:21:16.496 --> 00:21:21.276 A:middle
In collection view,
you can use dynamics

00:21:21.326 --> 00:21:23.626 A:middle
in three different ways.

00:21:24.676 --> 00:21:27.876 A:middle
You can decide to use dynamics
for very specific animations

00:21:28.416 --> 00:21:33.906 A:middle
like you're selecting a cell and
you want a very specific effect

00:21:34.306 --> 00:21:35.726 A:middle
for that selection for instance.

00:21:36.126 --> 00:21:41.146 A:middle
In that case, you just need
to create a dynamic animator

00:21:41.826 --> 00:21:47.536 A:middle
as this animation or interaction
and just remove it after that.

00:21:48.876 --> 00:21:53.606 A:middle
The other thing you can do is
to animate a subset of a layout

00:21:53.976 --> 00:21:56.986 A:middle
like you have a few cells,
you want to drag these cells

00:21:57.786 --> 00:21:58.816 A:middle
and after that, you're done.

00:21:59.836 --> 00:22:03.056 A:middle
So you can combine animated
and non-animated cells.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.836 --> 00:22:03.056 A:middle
So you can combine animated
and non-animated cells.

00:22:04.196 --> 00:22:10.686 A:middle
You can build an entire layout
with dynamics that works for,

00:22:11.936 --> 00:22:14.496 A:middle
well, non-huge data source.

00:22:15.846 --> 00:22:18.736 A:middle
Problem is, in dynamics,
what is off screen

00:22:19.226 --> 00:22:22.046 A:middle
in the system might
impact what is on screen.

00:22:22.376 --> 00:22:25.456 A:middle
So even if you just
generate cells on screen

00:22:25.456 --> 00:22:27.896 A:middle
for what is visible,
you might need

00:22:27.896 --> 00:22:29.566 A:middle
to simulate the entire system.

00:22:30.516 --> 00:22:34.046 A:middle
[ Pause ]

00:22:34.546 --> 00:22:38.086 A:middle
Again, you need to provide some
initial state for your items

00:22:38.896 --> 00:22:43.696 A:middle
and you have many ways to
do that, you can compute

00:22:43.946 --> 00:22:46.826 A:middle
that initial state,
create layout attributes

00:22:46.826 --> 00:22:50.086 A:middle
for that state, and
feed that to dynamics.

00:22:50.986 --> 00:22:53.236 A:middle
You can subclass
an existing layout.

00:22:53.326 --> 00:22:55.746 A:middle
And in the ScrollView
session this morning,

00:22:56.056 --> 00:22:58.156 A:middle
Josh and Alyssa [phonetic]
showed you how

00:22:58.156 --> 00:23:02.686 A:middle
to actually build messages like
effect with that technique.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.156 --> 00:23:02.686 A:middle
to actually build messages like
effect with that technique.

00:23:04.186 --> 00:23:11.096 A:middle
Or you can create and
add new items on the fly.

00:23:11.236 --> 00:23:13.836 A:middle
The key here is to
create the animator

00:23:13.836 --> 00:23:18.506 A:middle
with your collection layout
instance, add behaviors

00:23:18.916 --> 00:23:22.736 A:middle
and add collection view layout
attributes to these behaviors.

00:23:23.416 --> 00:23:25.896 A:middle
We are then going
to change position

00:23:25.896 --> 00:23:27.656 A:middle
and rotation on these instances.

00:23:28.176 --> 00:23:33.956 A:middle
We have some predefined,
some convenient support

00:23:33.996 --> 00:23:36.626 A:middle
for dynamics-- for
collection view in dynamics.

00:23:39.206 --> 00:23:43.476 A:middle
We take care of invalidating
the layout if anything changed

00:23:43.476 --> 00:23:48.136 A:middle
in the system and we also
pause and resume the animator

00:23:48.136 --> 00:23:51.306 A:middle
if your layout is no
longer the current layout

00:23:51.306 --> 00:23:53.296 A:middle
for the collection view
because in collection view,

00:23:53.296 --> 00:23:55.526 A:middle
you can switch layout attribute.

00:23:57.806 --> 00:23:59.466 A:middle
We also provide convenience
method

00:23:59.466 --> 00:24:04.936 A:middle
for implementing your layout so
you can ask the animator itself

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.466 --> 00:24:04.936 A:middle
for implementing your layout so
you can ask the animator itself

00:24:05.456 --> 00:24:08.226 A:middle
for layout attribute
for cell at index path

00:24:09.136 --> 00:24:12.966 A:middle
for supplementary views
and for decoration view.

00:24:13.446 --> 00:24:17.236 A:middle
So we know that's our
layout so we help you

00:24:17.236 --> 00:24:19.856 A:middle
in implementing this
method in your layout.

00:24:19.926 --> 00:24:21.196 A:middle
You can ask the animator.

00:24:22.076 --> 00:24:28.326 A:middle
We have, for layout updates, the
usual collection view methods,

00:24:28.976 --> 00:24:34.206 A:middle
so prepareLayout is usually when
you can instantiate an animator

00:24:34.936 --> 00:24:39.686 A:middle
or create your initial
state and prepare for update

00:24:39.686 --> 00:24:44.296 A:middle
which is another layout
method, you can add new items

00:24:44.396 --> 00:24:45.336 A:middle
through your behaviors.

00:24:46.696 --> 00:24:49.406 A:middle
And there is this very important
method in collection view

00:24:49.916 --> 00:24:53.936 A:middle
which is layoutAttributesInRect
which possibly basically defines

00:24:53.936 --> 00:24:55.776 A:middle
where the cells are going to be.

00:24:56.346 --> 00:24:57.626 A:middle
And to implement this method,

00:24:58.376 --> 00:25:02.146 A:middle
we have itemsInRect
in the animator.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.376 --> 00:25:02.146 A:middle
we have itemsInRect
in the animator.

00:25:02.876 --> 00:25:03.666 A:middle
So that's really easy.

00:25:03.666 --> 00:25:04.986 A:middle
You can ask the animator,

00:25:05.166 --> 00:25:09.346 A:middle
"Give me all the items you're
tracking in this rect."

00:25:11.216 --> 00:25:16.826 A:middle
Then you can combine these
items with maybe attributes

00:25:16.866 --> 00:25:18.506 A:middle
which are not animated.

00:25:18.926 --> 00:25:27.336 A:middle
Again, the way you design your
system will have a direct impact

00:25:27.336 --> 00:25:32.276 A:middle
on the number of
cells you can animate.

00:25:33.536 --> 00:25:37.086 A:middle
I would like to show
you an example

00:25:37.086 --> 00:25:43.946 A:middle
of collection view using
dynamic for a specific effect.

00:25:44.096 --> 00:25:45.196 A:middle
That's actually an example

00:25:45.266 --> 00:25:47.486 A:middle
from collection view
sessions last year

00:25:48.026 --> 00:25:50.896 A:middle
when I was dragging
a cell in a layout.

00:25:50.896 --> 00:25:54.686 A:middle
So we are going to do
that the dynamics way.

00:25:55.946 --> 00:25:57.356 A:middle
So I select a few cells.

00:25:58.426 --> 00:26:05.756 A:middle
So the effect is maybe
a little bit too much

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.426 --> 00:26:05.756 A:middle
So the effect is maybe
a little bit too much

00:26:06.466 --> 00:26:08.446 A:middle
but you get the idea.

00:26:08.836 --> 00:26:11.846 A:middle
So we have these cells
connected to springs

00:26:12.216 --> 00:26:13.486 A:middle
and reacting to the gesture.

00:26:15.346 --> 00:26:21.176 A:middle
And when I end my gesture,
I just clear the animator.

00:26:22.516 --> 00:26:26.586 A:middle
[ Applause ]

00:26:27.086 --> 00:26:29.246 A:middle
How complex is that?

00:26:30.236 --> 00:26:31.066 A:middle
Quite simple.

00:26:31.476 --> 00:26:33.226 A:middle
You just need to
decompose this program.

00:26:33.966 --> 00:26:36.036 A:middle
Why do I need to animate that?

00:26:37.626 --> 00:26:39.346 A:middle
The way I did it, perhaps,

00:26:40.096 --> 00:26:41.896 A:middle
there are many solutions
to this problem.

00:26:42.696 --> 00:26:47.756 A:middle
I started with a base behavior,
a single cell that I want

00:26:47.756 --> 00:26:49.716 A:middle
to drag around with
a spring effect,

00:26:53.096 --> 00:26:57.826 A:middle
and the way I defined my
behavior is four springs

00:26:58.546 --> 00:27:03.086 A:middle
attached to a plate or
rectangle and attached

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.546 --> 00:27:03.086 A:middle
attached to a plate or
rectangle and attached

00:27:03.326 --> 00:27:04.336 A:middle
to the center of this view.

00:27:05.146 --> 00:27:08.496 A:middle
So I'm going to move these four
points to get the spring effect.

00:27:11.096 --> 00:27:14.656 A:middle
Then I need to be able to
drag many items, right?

00:27:15.356 --> 00:27:20.056 A:middle
So I'm going to define my
eye-level drag behavior

00:27:21.056 --> 00:27:25.206 A:middle
and I'm going to do the exact
same trick for all cells.

00:27:26.016 --> 00:27:30.416 A:middle
Then I need a layout
and I'm going

00:27:30.416 --> 00:27:35.716 A:middle
to define a flow layouts
subclass because the basic mode

00:27:35.836 --> 00:27:37.726 A:middle
of my layout is just
to display a grid.

00:27:37.726 --> 00:27:41.666 A:middle
It only changes when
I interact with it.

00:27:42.476 --> 00:27:48.446 A:middle
So I need three classes,
a DraggableLayout

00:27:48.506 --> 00:27:50.816 A:middle
which is a
UIColelctionViewFlowLayout.

00:27:50.936 --> 00:27:55.696 A:middle
I'm going to define a
simple API on this layout

00:27:56.076 --> 00:27:59.266 A:middle
so I can easily connect
that to gesture recognizer,

00:27:59.386 --> 00:28:03.416 A:middle
I can start the interaction
with an array

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.386 --> 00:28:03.416 A:middle
I can start the interaction
with an array

00:28:03.416 --> 00:28:04.896 A:middle
of index paths from a point.

00:28:05.306 --> 00:28:09.726 A:middle
I can update that location and
I can stop the interaction.

00:28:10.306 --> 00:28:16.026 A:middle
My high-level behavior is going
to be quite similar for the API.

00:28:16.026 --> 00:28:19.326 A:middle
I'm going to create
drag behavior with a set

00:28:19.326 --> 00:28:24.176 A:middle
of dynamic items--
and from a point,

00:28:24.226 --> 00:28:27.326 A:middle
and a way to change
that location.

00:28:28.076 --> 00:28:31.976 A:middle
And my low-level behavior
is going to be defined

00:28:31.976 --> 00:28:36.436 A:middle
with just one item I want to
animate, a point and a way

00:28:36.436 --> 00:28:40.176 A:middle
to update the location
of this cell.

00:28:40.366 --> 00:28:42.366 A:middle
So let's see how I
implemented that.

00:28:43.446 --> 00:28:45.206 A:middle
Let's start with a
low-level behavior.

00:28:45.666 --> 00:28:49.386 A:middle
RectangleAttachmentBehavior,
I configured that as an item

00:28:50.256 --> 00:28:54.206 A:middle
at a given point and
then it's just a matter

00:28:54.206 --> 00:28:57.356 A:middle
of creating four
attachment behavior,

00:28:57.756 --> 00:28:58.816 A:middle
so I have this four points,

00:28:58.866 --> 00:29:02.316 A:middle
I just create
SpringAttachmentBehavior

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.866 --> 00:29:02.316 A:middle
I just create
SpringAttachmentBehavior

00:29:02.556 --> 00:29:06.966 A:middle
for each point and I add
that as children behaviors.

00:29:07.276 --> 00:29:13.056 A:middle
When I want to update
the location,

00:29:13.996 --> 00:29:16.416 A:middle
I just need to compute
again these four points

00:29:16.976 --> 00:29:18.796 A:middle
and update the attachment point

00:29:18.796 --> 00:29:22.486 A:middle
for my four attachment
behaviors.

00:29:23.066 --> 00:29:29.036 A:middle
So that's my first low-level
behavior using four predefined

00:29:29.196 --> 00:29:30.496 A:middle
attachment behaviors.

00:29:31.016 --> 00:29:32.976 A:middle
The high-level behavior,

00:29:33.336 --> 00:29:38.246 A:middle
drag behavior is actually very
simple, it's all in this slide.

00:29:39.666 --> 00:29:40.336 A:middle
So what do I need?

00:29:40.696 --> 00:29:44.956 A:middle
I need to pass the dynamic items
I want to animate, that point.

00:29:45.336 --> 00:29:49.956 A:middle
I'm going to create attachments,
my low-level attachments,

00:29:50.226 --> 00:29:51.536 A:middle
RectangleAttachmentBehavior.

00:29:52.886 --> 00:29:59.836 A:middle
I add this as child behaviors
and to update the drag location,

00:29:59.896 --> 00:30:02.316 A:middle
I'm just going to basically
tell my low-level behavior

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.896 --> 00:30:02.316 A:middle
I'm just going to basically
tell my low-level behavior

00:30:02.846 --> 00:30:04.326 A:middle
to update to this point.

00:30:05.806 --> 00:30:07.896 A:middle
So that's it for my
high-level behavior.

00:30:09.516 --> 00:30:10.396 A:middle
No more layouts.

00:30:11.686 --> 00:30:15.066 A:middle
The interaction code is
quite simple actually.

00:30:15.696 --> 00:30:18.116 A:middle
I need to track these
index paths.

00:30:18.616 --> 00:30:20.026 A:middle
I want to create an animator.

00:30:21.576 --> 00:30:24.246 A:middle
Then for each of
these attributes,

00:30:24.296 --> 00:30:26.546 A:middle
I'm going to need
that initial stage.

00:30:27.006 --> 00:30:31.906 A:middle
So I'm going to ask flow
layout which is a super class.

00:30:32.096 --> 00:30:34.116 A:middle
I changed this index
because I'm dragging this.

00:30:34.116 --> 00:30:35.616 A:middle
I want this set on top

00:30:36.706 --> 00:30:39.356 A:middle
and I create my high-level
drag behavior.

00:30:40.846 --> 00:30:44.646 A:middle
I add this behavior
to the animator.

00:30:44.646 --> 00:30:46.036 A:middle
Updating for location

00:30:46.086 --> 00:30:48.606 A:middle
and removing everything
is extremely simple.

00:30:49.446 --> 00:30:53.136 A:middle
We just update the point
or clear the animator.

00:30:55.926 --> 00:31:01.056 A:middle
The layout implementation
itself, "Why do I need to define

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:55.926 --> 00:31:01.056 A:middle
The layout implementation
itself, "Why do I need to define

00:31:01.056 --> 00:31:04.696 A:middle
which cells are in this
layout for a given rect?"

00:31:06.046 --> 00:31:07.826 A:middle
Some cells might
not be animated.

00:31:08.386 --> 00:31:13.136 A:middle
So I start by asking the super
class, "Give me all the cells."

00:31:15.086 --> 00:31:21.336 A:middle
Next, I want to remove the
cells I'm actually animating.

00:31:23.836 --> 00:31:29.106 A:middle
And then, I need to add the
cells I'm actually tracking,

00:31:29.106 --> 00:31:30.986 A:middle
the layout attributes
I'm actually tracking,

00:31:31.836 --> 00:31:32.646 A:middle
from the animator.

00:31:33.876 --> 00:31:39.736 A:middle
So I use this animator, I can do
the rect method, and I just have

00:31:39.736 --> 00:31:42.276 A:middle
to return all these attributes.

00:31:42.626 --> 00:31:46.566 A:middle
And that's it, that's the entire
code for this small example.

00:31:48.426 --> 00:31:54.226 A:middle
Now, for some more
exciting stuff, UIDynamics

00:31:54.226 --> 00:31:55.486 A:middle
and UIVIewController Transition,

00:31:55.486 --> 00:32:02.706 A:middle
I'd like to ask Bruce
Nilo to show you that.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:55.486 --> 00:32:02.706 A:middle
I'd like to ask Bruce
Nilo to show you that.

00:32:02.706 --> 00:32:03.936 A:middle
[ Applause ]

00:32:03.936 --> 00:32:04.236 A:middle
&gt;&gt; Thank you.

00:32:05.146 --> 00:32:06.496 A:middle
Thank you all.

00:32:09.366 --> 00:32:10.456 A:middle
Thank you, Olivier.

00:32:11.036 --> 00:32:14.126 A:middle
My name is Bruce Nilo,
and this stage is huge,

00:32:14.126 --> 00:32:15.316 A:middle
I've never been on it before.

00:32:15.966 --> 00:32:18.836 A:middle
So I don't know how
many of you have been

00:32:18.926 --> 00:32:20.226 A:middle
at this morning's talk.

00:32:20.226 --> 00:32:21.426 A:middle
I'd like to get a good sense

00:32:21.426 --> 00:32:23.766 A:middle
about custom view
controller transitions.

00:32:25.176 --> 00:32:26.276 A:middle
Oh, a lot of you, OK.

00:32:27.146 --> 00:32:30.196 A:middle
So I'm going to kind of
breeze through a quick review

00:32:30.336 --> 00:32:33.036 A:middle
of what custom view controller
transitions are all about.

00:32:33.036 --> 00:32:35.886 A:middle
And then, what we're going
to talk about is we're going

00:32:35.886 --> 00:32:37.896 A:middle
to kind of build a
little bit on what--

00:32:37.896 --> 00:32:40.376 A:middle
always discussing about
how to create kind

00:32:40.376 --> 00:32:41.696 A:middle
of compound behaviors.

00:32:42.036 --> 00:32:44.346 A:middle
But these compound
behaviors that we're going

00:32:44.346 --> 00:32:45.886 A:middle
to create are going
to conform to some

00:32:45.886 --> 00:32:48.796 A:middle
of these new transitioning
protocols that we've defined,

00:32:49.346 --> 00:32:51.016 A:middle
and are going to be used

00:32:51.016 --> 00:32:53.216 A:middle
to actually implement
some custom view

00:32:53.216 --> 00:32:54.216 A:middle
controller transitions.

00:32:54.216 --> 00:32:55.746 A:middle
And we're going to
walk through a couple

00:32:55.746 --> 00:32:58.066 A:middle
of examples showing
two different types,

00:32:58.766 --> 00:32:59.706 A:middle
and you'll get a sense

00:32:59.706 --> 00:33:02.076 A:middle
of how these different things
compose with one another.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.706 --> 00:33:02.076 A:middle
of how these different things
compose with one another.

00:33:02.076 --> 00:33:05.926 A:middle
So let's do the quick review.

00:33:06.886 --> 00:33:11.246 A:middle
First of all, the basic idea
is that there's a few delegates

00:33:11.246 --> 00:33:15.826 A:middle
that you create and set on
your view controller directly

00:33:16.036 --> 00:33:19.326 A:middle
if you're doing a present or a
dismiss view controller call,

00:33:19.806 --> 00:33:22.656 A:middle
or you can implement
some new methods

00:33:22.656 --> 00:33:24.206 A:middle
on Navigation Controller
Delegate

00:33:24.206 --> 00:33:25.636 A:middle
or Tab Bar Controller Delegate.

00:33:26.486 --> 00:33:30.346 A:middle
And at the appropriate time
when you are either pushing

00:33:30.346 --> 00:33:33.506 A:middle
or popping or presenting or
dismissing, we're going to ask

00:33:33.506 --> 00:33:36.506 A:middle
that delegate to vend
an animation controller

00:33:37.276 --> 00:33:38.816 A:middle
or an interaction controller.

00:33:40.196 --> 00:33:43.726 A:middle
So the methods that
those objects

00:33:43.766 --> 00:33:47.676 A:middle
that your delegate vends need
to implement are various few.

00:33:48.816 --> 00:33:51.736 A:middle
The main one for the animation
controller is funny enough,

00:33:52.456 --> 00:33:53.406 A:middle
animateTransition.

00:33:53.926 --> 00:33:58.926 A:middle
And for interactive transition,
it's startInteractiveTransition,

00:33:59.346 --> 00:34:00.866 A:middle
kind of pretty simple.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.346 --> 00:34:00.866 A:middle
kind of pretty simple.

00:34:01.726 --> 00:34:04.396 A:middle
These two methods are passed

00:34:04.396 --> 00:34:08.206 A:middle
in a special object called the
ContextTransitioning object

00:34:08.206 --> 00:34:10.146 A:middle
which defines the
characteristics

00:34:10.146 --> 00:34:10.946 A:middle
of the transition.

00:34:11.585 --> 00:34:15.666 A:middle
It defines where views
start, where they end.

00:34:16.065 --> 00:34:20.056 A:middle
It also is a little bit active
and that we define some methods

00:34:20.056 --> 00:34:22.126 A:middle
that need to be called at
certain points in time.

00:34:22.376 --> 00:34:24.186 A:middle
So basically, the declaration

00:34:24.186 --> 00:34:25.775 A:middle
of the protocol looks
something like this.

00:34:25.775 --> 00:34:26.916 A:middle
There is a container view.

00:34:27.286 --> 00:34:29.755 A:middle
That's the view in
which the tran--

00:34:29.815 --> 00:34:32.626 A:middle
the animation takes
place for the transition.

00:34:33.686 --> 00:34:35.536 A:middle
There are some methods
to query to find

00:34:35.536 --> 00:34:37.426 A:middle
out where I'm supposed
to end up.

00:34:38.335 --> 00:34:41.996 A:middle
And then, there are those action
methods that are on the context.

00:34:41.996 --> 00:34:45.706 A:middle
And for interactive transitions,
there is a few of them.

00:34:45.706 --> 00:34:47.686 A:middle
There is
updateInteractiveTransition

00:34:47.686 --> 00:34:50.706 A:middle
with a present, and then
there's either Finish or Cancel.

00:34:51.835 --> 00:34:56.306 A:middle
And finally, when the transition
is all over, and this is true

00:34:56.306 --> 00:34:59.926 A:middle
for both interactive transitions
as well as just regular,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:00.066 --> 00:35:01.916 A:middle
straight up animated
transitions,

00:35:02.376 --> 00:35:05.406 A:middle
you must call a special method
called completeTransition

00:35:05.746 --> 00:35:07.796 A:middle
indicating whether
canceled or not.

00:35:08.366 --> 00:35:12.906 A:middle
And this basically patches
up any data structures

00:35:12.906 --> 00:35:14.526 A:middle
and puts things into
a consistent state

00:35:14.526 --> 00:35:16.096 A:middle
so your application
can move forward.

00:35:17.346 --> 00:35:19.456 A:middle
It moves as a little bit to talk

00:35:19.456 --> 00:35:21.616 A:middle
about the different
states involved

00:35:21.616 --> 00:35:23.046 A:middle
in an interactive transition.

00:35:23.466 --> 00:35:26.036 A:middle
I've kind of broken it
into a few sections.

00:35:26.036 --> 00:35:28.916 A:middle
The first four kind of
where you go from nothing,

00:35:28.916 --> 00:35:31.736 A:middle
you're in no particular
transition mode

00:35:32.156 --> 00:35:33.916 A:middle
to the interactive mode.

00:35:34.516 --> 00:35:37.696 A:middle
And you might consider this,
if you're doing a pop gesture,

00:35:37.696 --> 00:35:39.866 A:middle
it's as your finger is down

00:35:39.866 --> 00:35:42.436 A:middle
and you're dragging
across the screen.

00:35:43.066 --> 00:35:44.896 A:middle
When you release
that, your finger,

00:35:44.896 --> 00:35:46.246 A:middle
the transition isn't over yet.

00:35:46.636 --> 00:35:48.026 A:middle
It still needs to do something.

00:35:48.026 --> 00:35:49.356 A:middle
It's either going to animate off

00:35:49.356 --> 00:35:51.056 A:middle
or animate back to
where you started.

00:35:51.396 --> 00:35:54.276 A:middle
And the decision of which
direction you're going

00:35:54.276 --> 00:35:56.516 A:middle
in is really up to
you in your code.

00:35:56.906 --> 00:35:59.896 A:middle
And so you can either cancel
the transition or continue it.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.656 --> 00:36:03.696 A:middle
And once you do, you then
animate it to completion

00:36:03.886 --> 00:36:05.656 A:middle
and call the completeTransition
method.

00:36:05.766 --> 00:36:09.406 A:middle
So it's really kind of that
simple and if you are interested

00:36:09.406 --> 00:36:13.296 A:middle
in more details, you can look at
the video of this morning's talk

00:36:13.416 --> 00:36:17.846 A:middle
and there are also some
docs available for that.

00:36:18.006 --> 00:36:22.736 A:middle
So, two examples that
we're going to go through.

00:36:22.966 --> 00:36:27.006 A:middle
One is a-- for lack of a better
word, a drop in and out dialog.

00:36:27.086 --> 00:36:30.246 A:middle
It's kind of a dialog which
will-- you will present.

00:36:30.246 --> 00:36:33.266 A:middle
It will be a custom view
controller presentation.

00:36:33.266 --> 00:36:34.896 A:middle
It will drop on screen.

00:36:34.896 --> 00:36:36.326 A:middle
It's not going to
be interactive.

00:36:36.326 --> 00:36:37.996 A:middle
But what is it going
to demonstrate?

00:36:37.996 --> 00:36:39.806 A:middle
It's going to demonstrate
using kind

00:36:39.806 --> 00:36:42.576 A:middle
of a two-stage dynamic
simulation where we're going

00:36:42.576 --> 00:36:45.736 A:middle
to use the action methods
and the DidPause methods

00:36:45.736 --> 00:36:49.256 A:middle
and so forth to change
the dynamics of the system

00:36:49.256 --> 00:36:51.026 A:middle
as the transition evolves.

00:36:52.286 --> 00:36:56.626 A:middle
The second demo that I'd
like to deconstruct is kind

00:36:56.626 --> 00:36:59.046 A:middle
of just a simple drop shade
transition where I'm going

00:36:59.266 --> 00:37:02.316 A:middle
to pull down from the top
of the screen and I'm going

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.266 --> 00:37:02.316 A:middle
to pull down from the top
of the screen and I'm going

00:37:02.316 --> 00:37:04.716 A:middle
to release it and either it's
going to bounce up to the top

00:37:04.716 --> 00:37:06.276 A:middle
or bounce down to the bottom.

00:37:06.806 --> 00:37:10.476 A:middle
And the dynamics there is
fairly straightforward,

00:37:10.676 --> 00:37:14.376 A:middle
but it's interesting to see
how the interaction mode

00:37:14.376 --> 00:37:17.966 A:middle
of the transition leverages the
dynamic system and vice versa.

00:37:18.866 --> 00:37:21.926 A:middle
So let's talk about the drop
in and drop out dialog a bit.

00:37:23.036 --> 00:37:26.056 A:middle
So, it's a dynamic
behavior that conforms

00:37:26.056 --> 00:37:27.986 A:middle
to the animated transitioning
protocol

00:37:28.496 --> 00:37:30.366 A:middle
and it demonstrates a couple
of interesting things.

00:37:30.366 --> 00:37:33.816 A:middle
It demonstrates the action
block which Olivier referred to.

00:37:33.816 --> 00:37:37.186 A:middle
This is called on every
step of the simulation,

00:37:37.276 --> 00:37:38.446 A:middle
of the physics simulation.

00:37:39.986 --> 00:37:42.546 A:middle
We're going to implement
a collision behavior,

00:37:42.546 --> 00:37:44.686 A:middle
but we're also going to
specify the collision delegate

00:37:45.016 --> 00:37:47.656 A:middle
because we want to know when
we've hit a certain boundary.

00:37:48.746 --> 00:37:51.126 A:middle
And finally, and this
is kind of interesting,

00:37:51.126 --> 00:37:54.436 A:middle
we're going to implement the
dynamic animator delegate.

00:37:54.936 --> 00:37:58.176 A:middle
And in particular, we're
interested in DidPause callback.

00:37:58.176 --> 00:38:01.856 A:middle
And we're also interested in the
dynamic animator's elapsed time.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.176 --> 00:38:01.856 A:middle
And we're also interested in the
dynamic animator's elapsed time.

00:38:01.976 --> 00:38:05.036 A:middle
Now, the reason for this is that
when you're doing a transition,

00:38:05.826 --> 00:38:08.186 A:middle
typically, transitions take
a finite amount of time.

00:38:08.506 --> 00:38:11.156 A:middle
You don't want them to take,
you know, I don't know,

00:38:11.156 --> 00:38:14.156 A:middle
30 seconds to converge and go.

00:38:14.156 --> 00:38:17.636 A:middle
So you might want to put a bound
on it and make sure you're done

00:38:17.636 --> 00:38:20.256 A:middle
in two seconds or one and
a half seconds or whatever.

00:38:20.256 --> 00:38:22.646 A:middle
And so typically, when
you build these systems,

00:38:22.646 --> 00:38:24.836 A:middle
you're kind of iteratively
trying to figure

00:38:24.836 --> 00:38:26.166 A:middle
out how does it look, right?

00:38:26.166 --> 00:38:28.236 A:middle
But you want to actually ensure

00:38:28.236 --> 00:38:30.146 A:middle
that the transition takes
a certain amount of time.

00:38:30.866 --> 00:38:34.536 A:middle
And you can do that by
looking at the elapsed time

00:38:34.536 --> 00:38:37.536 A:middle
of the dynamic animator and
checking in the DidPause

00:38:37.536 --> 00:38:38.406 A:middle
and the action methods.

00:38:38.406 --> 00:38:39.596 A:middle
And we're going to
demonstrate that.

00:38:40.136 --> 00:38:41.706 A:middle
So I'm going to show
a quick demo

00:38:41.846 --> 00:38:43.226 A:middle
of the drop in and out dialog.

00:38:43.966 --> 00:38:47.206 A:middle
So this is kind of a demo that
shows all kinds of transitions,

00:38:47.206 --> 00:38:49.516 A:middle
but I'm going to show
you the drop dialog.

00:38:50.626 --> 00:38:52.716 A:middle
Now, this thing comes
in as little dialog.

00:38:52.716 --> 00:38:54.536 A:middle
What's interesting about
this is, first of all,

00:38:54.996 --> 00:38:58.016 A:middle
this is on a phone and we're
doing a present view controller

00:38:58.016 --> 00:39:01.556 A:middle
and guess what, I can see the
presenting view controller.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.016 --> 00:39:01.556 A:middle
and guess what, I can see the
presenting view controller.

00:39:01.966 --> 00:39:04.226 A:middle
You couldn't do this
really on the phone before.

00:39:04.226 --> 00:39:05.796 A:middle
So now, you can implement
your kind

00:39:06.176 --> 00:39:10.266 A:middle
of fo [phonetic] form sheets or
foe popovers right on a phone.

00:39:11.106 --> 00:39:13.036 A:middle
But you'll notice that
bounce that came in.

00:39:13.306 --> 00:39:16.486 A:middle
So it comes in with a bounce
and I'd also like to show

00:39:16.486 --> 00:39:20.696 A:middle
that when we created that dialog
view, before it animated in,

00:39:21.246 --> 00:39:26.356 A:middle
we did something that I'm
not sure if we can see it.

00:39:26.756 --> 00:39:29.966 A:middle
Well, what is supposed
to be shown here is some

00:39:29.966 --> 00:39:34.146 A:middle
of that parallax where we
layer these dialog views.

00:39:34.476 --> 00:39:38.316 A:middle
And there's new API which
is available, I believed,

00:39:38.316 --> 00:39:41.296 A:middle
in the seed [phonetic] that we
delivered called UIMotionEffect.

00:39:41.776 --> 00:39:44.346 A:middle
And you can put a
UIMotionEffect on to a view

00:39:44.476 --> 00:39:46.436 A:middle
and then animate it directly.

00:39:46.566 --> 00:39:49.366 A:middle
And if it was working, I would
show it to you, but it isn't

00:39:49.366 --> 00:39:51.406 A:middle
so you'll have to
take my word for.

00:39:51.996 --> 00:39:54.116 A:middle
Now that was a present.

00:39:54.266 --> 00:39:56.576 A:middle
Let's see what happens
when I dismiss.

00:39:57.986 --> 00:40:00.526 A:middle
Now the first thing that happens
is we slide off to the side

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:57.986 --> 00:40:00.526 A:middle
Now the first thing that happens
is we slide off to the side

00:40:00.526 --> 00:40:02.816 A:middle
and then we bounce
off and go away.

00:40:03.026 --> 00:40:05.076 A:middle
That's kind of a
two step simulation.

00:40:05.576 --> 00:40:09.286 A:middle
[Applause]

00:40:09.786 --> 00:40:11.936 A:middle
OK. So how did we do this?

00:40:12.326 --> 00:40:13.686 A:middle
Let's talk about that.

00:40:16.316 --> 00:40:18.956 A:middle
So I'm going to show
quickly some of the steps

00:40:18.956 --> 00:40:23.116 A:middle
and there's going to be a lot of
code up here, so bear with me.

00:40:23.116 --> 00:40:27.556 A:middle
The YYDropOutAnimator
is the animator object

00:40:27.556 --> 00:40:30.596 A:middle
which is a subclass of
dynamic behavior that I used

00:40:30.596 --> 00:40:32.306 A:middle
to create this effect.

00:40:33.366 --> 00:40:36.046 A:middle
And everything here
is just a consequence

00:40:36.046 --> 00:40:37.546 A:middle
of this specific implementation

00:40:37.546 --> 00:40:39.246 A:middle
and it's broken up
into a few things.

00:40:39.836 --> 00:40:42.436 A:middle
First of all, you'll notice
that it conforms to a bunch

00:40:42.436 --> 00:40:43.276 A:middle
of different protocols.

00:40:43.276 --> 00:40:44.946 A:middle
It conforms to the
animated transitioning.

00:40:44.946 --> 00:40:47.136 A:middle
It conforms to the animator
delegate and conforms

00:40:47.136 --> 00:40:48.346 A:middle
to the collision
behavior delegate.

00:40:48.706 --> 00:40:51.096 A:middle
This is some of the power of
using protocols, first of all,

00:40:51.096 --> 00:40:53.356 A:middle
that you're not bound
to a specific instance

00:40:53.356 --> 00:40:56.086 A:middle
and you can kind of mold
the objects of your choice

00:40:56.506 --> 00:41:00.876 A:middle
for implementing certain
behaviors in the system.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:56.506 --> 00:41:00.876 A:middle
for implementing certain
behaviors in the system.

00:41:00.986 --> 00:41:03.246 A:middle
When you create this thing,
you're usually create--

00:41:03.246 --> 00:41:05.106 A:middle
the delegate is usually
creating it

00:41:05.556 --> 00:41:08.486 A:middle
and when the delegate is
asked, it's actually passed

00:41:08.816 --> 00:41:12.446 A:middle
in a transition context and we
scroll that away in the animator

00:41:12.446 --> 00:41:14.326 A:middle
because we want to
be able to use it

00:41:14.676 --> 00:41:16.666 A:middle
in the dynamic behavior
callbacks.

00:41:17.226 --> 00:41:20.376 A:middle
We know whether or not the
dialog is being presented

00:41:20.376 --> 00:41:21.026 A:middle
or dismissed.

00:41:21.026 --> 00:41:22.086 A:middle
And, again, the delegate,

00:41:22.146 --> 00:41:24.586 A:middle
when it's called,
has that information.

00:41:25.676 --> 00:41:27.026 A:middle
We set the finish time.

00:41:27.026 --> 00:41:29.486 A:middle
The finish time is, I think,
I was alluding to before

00:41:29.486 --> 00:41:32.146 A:middle
which is I don't want this
transition to take too long.

00:41:32.416 --> 00:41:36.706 A:middle
So I want to say, "I want it to
be done no later than this point

00:41:36.706 --> 00:41:39.236 A:middle
in time," and we're
going to check that value

00:41:39.756 --> 00:41:43.006 A:middle
in the animator's callbacks

00:41:43.006 --> 00:41:45.126 A:middle
and the dynamic behavior's
action method.

00:41:45.816 --> 00:41:49.206 A:middle
And finally, we're going to--
this is a composite behavior

00:41:49.206 --> 00:41:53.516 A:middle
and we are going to scroll away
various primitive behaviors

00:41:53.516 --> 00:41:55.626 A:middle
that are actually going
to be added and removed,

00:41:55.626 --> 00:41:57.396 A:middle
these children behaviors

00:41:57.396 --> 00:42:01.176 A:middle
as Olivier demonstrated
a little bit earlier.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:57.396 --> 00:42:01.176 A:middle
as Olivier demonstrated
a little bit earlier.

00:42:01.326 --> 00:42:05.016 A:middle
So, amazingly enough, I scrolled
away in the corner of my office

00:42:05.016 --> 00:42:09.396 A:middle
with some green felt that
wasn't being used, and I used it

00:42:09.396 --> 00:42:10.936 A:middle
to create kind of a visual image

00:42:10.936 --> 00:42:14.936 A:middle
of what a view controller
screen might look like.

00:42:15.826 --> 00:42:19.276 A:middle
And basically, we're getting
called with animateTransition.

00:42:19.366 --> 00:42:21.036 A:middle
This is an interactive
transition.

00:42:21.066 --> 00:42:24.436 A:middle
It's a straight up animation
and the question is, now,

00:42:24.436 --> 00:42:26.456 A:middle
how do we hook up the
dynamics to the system?

00:42:27.166 --> 00:42:29.636 A:middle
Well, the first thing that we
have to do is we have to figure

00:42:29.636 --> 00:42:32.556 A:middle
out what's moving and
what we actually want

00:42:32.556 --> 00:42:34.156 A:middle
to apply forces and the like to.

00:42:34.716 --> 00:42:36.776 A:middle
And a lot of this
code is alighted,

00:42:36.926 --> 00:42:38.766 A:middle
so I apologize for that.

00:42:38.766 --> 00:42:40.906 A:middle
But there's this thing
called the dynamic view.

00:42:40.906 --> 00:42:42.656 A:middle
The dynamic view is
the view that's moving.

00:42:42.856 --> 00:42:46.796 A:middle
It's just a name.

00:42:47.016 --> 00:42:48.896 A:middle
When it's called, the first
thing that we do is we add

00:42:49.146 --> 00:42:51.226 A:middle
that dynamic view into
the view hierarchy.

00:42:51.306 --> 00:42:53.736 A:middle
It so happens that
it's above the screen

00:42:54.126 --> 00:42:55.416 A:middle
because it's going to drop in.

00:42:55.626 --> 00:42:59.096 A:middle
And then, we start creating
some of our primitive behaviors

00:42:59.476 --> 00:43:03.406 A:middle
like the dynamic item behavior
where we set up an elasticity,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.476 --> 00:43:03.406 A:middle
like the dynamic item behavior
where we set up an elasticity,

00:43:03.696 --> 00:43:06.856 A:middle
we have the dynamic view
to that primitive behavior.

00:43:07.286 --> 00:43:10.746 A:middle
And for the first segment of
this transition, we don't want

00:43:11.076 --> 00:43:12.206 A:middle
to allow any rotation.

00:43:13.396 --> 00:43:14.426 A:middle
Then we add some gravity.

00:43:15.486 --> 00:43:18.026 A:middle
Gravity is a pretty
simple primitive behavior.

00:43:18.296 --> 00:43:20.736 A:middle
It's going to be three
times normal gravity.

00:43:21.336 --> 00:43:27.406 A:middle
We add a collision behavior
and you'll notice that the way

00:43:27.406 --> 00:43:29.276 A:middle
that I set the bounce

00:43:29.276 --> 00:43:32.476 A:middle
on the collision behavior is
using a slightly different

00:43:32.696 --> 00:43:34.436 A:middle
method on the collision
behavior,

00:43:34.506 --> 00:43:37.496 A:middle
set translate reference bounds
into boundaries with insets.

00:43:37.816 --> 00:43:40.476 A:middle
That's actually a very useful
method because you can kind

00:43:40.476 --> 00:43:43.586 A:middle
of take the reference
coordinate system and move it

00:43:43.586 --> 00:43:46.746 A:middle
in different directions
based on simple UIEdgeInsets.

00:43:47.666 --> 00:43:51.526 A:middle
So now let's talk a little
bit about the finish time.

00:43:51.606 --> 00:43:53.876 A:middle
Basically, we query
the dynamic animator

00:43:53.876 --> 00:43:55.196 A:middle
for how much time has elapsed.

00:43:55.196 --> 00:43:58.046 A:middle
It so happens in this case, it's
going to be 0 but, you know,

00:43:58.046 --> 00:43:59.656 A:middle
for sake of being true,

00:43:59.806 --> 00:44:02.646 A:middle
we ask the elapsed time
then we add the duration

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.806 --> 00:44:02.646 A:middle
we ask the elapsed time
then we add the duration

00:44:02.906 --> 00:44:05.596 A:middle
that was scrolled away when we
created the behavior object.

00:44:06.286 --> 00:44:09.706 A:middle
And we create an action block
and that action block is going

00:44:09.706 --> 00:44:14.506 A:middle
to check whether or not the
time has passed that we want

00:44:14.506 --> 00:44:16.376 A:middle
to dedicate towards
this transition.

00:44:16.656 --> 00:44:19.766 A:middle
And if it has, there is a
very simple way to finish.

00:44:20.366 --> 00:44:23.916 A:middle
We basically remove ourselves
from the dynamic animator.

00:44:24.406 --> 00:44:28.216 A:middle
Now, to get things going,

00:44:28.216 --> 00:44:31.046 A:middle
we have to add the children
behavior to ourselves, remember,

00:44:31.046 --> 00:44:32.536 A:middle
we are a compound behavior.

00:44:33.216 --> 00:44:34.656 A:middle
And then, we have
to add ourselves

00:44:34.656 --> 00:44:36.756 A:middle
and there's only one behavior
now that's being added

00:44:36.856 --> 00:44:39.636 A:middle
to the animator and that is us.

00:44:40.436 --> 00:44:44.696 A:middle
And at this point, the physics
engine is going to start

00:44:44.696 --> 00:44:47.086 A:middle
and we're going to start
simulating our transition.

00:44:47.596 --> 00:44:54.526 A:middle
And there you have it.

00:44:54.756 --> 00:44:55.826 A:middle
So we've transitioned.

00:44:56.016 --> 00:44:58.066 A:middle
We're done, it's up
on the screen and now,

00:44:58.316 --> 00:45:00.236 A:middle
we're going to hit the
good to know button.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.316 --> 00:45:00.236 A:middle
we're going to hit the
good to know button.

00:45:00.976 --> 00:45:03.386 A:middle
And we're going to
do the dismiss,

00:45:03.386 --> 00:45:06.166 A:middle
and the dismiss is
a two-stage thing.

00:45:07.126 --> 00:45:08.856 A:middle
Again, we call
animateTransition.

00:45:09.046 --> 00:45:11.086 A:middle
We don't have to add a view
into the view hierarchy.

00:45:11.086 --> 00:45:13.096 A:middle
This is a dismiss,
it's already there.

00:45:13.406 --> 00:45:15.546 A:middle
We're going to set our
dynamic item behaviors

00:45:15.546 --> 00:45:16.626 A:middle
up a little bit differently.

00:45:16.626 --> 00:45:18.646 A:middle
We're going to allow
rotation this time.

00:45:19.306 --> 00:45:22.406 A:middle
Gravity is set up exactly
the same as it was before.

00:45:23.306 --> 00:45:26.106 A:middle
Our collision boundaries are a
little bit different and that's

00:45:26.106 --> 00:45:29.386 A:middle
because the type of
animation that we're trying

00:45:29.386 --> 00:45:30.696 A:middle
to achieve is a little
bit different.

00:45:31.786 --> 00:45:34.556 A:middle
We're going to add an attachment
behavior where we're going

00:45:34.556 --> 00:45:36.636 A:middle
to kind of try to anchor--

00:45:37.336 --> 00:45:39.426 A:middle
we're going to specify
a different position

00:45:39.426 --> 00:45:40.076 A:middle
in the default.

00:45:40.076 --> 00:45:42.086 A:middle
The default is usually
the center of the item.

00:45:42.476 --> 00:45:44.226 A:middle
We're going to kind of put it
up to the top and we're going

00:45:44.226 --> 00:45:46.246 A:middle
to put the anchor a
little bit off to the side.

00:45:46.646 --> 00:45:49.676 A:middle
We're going to give it a little
bit of kind of bounciness.

00:45:50.216 --> 00:45:53.466 A:middle
And then, we're going to set
up the action block again.

00:45:53.466 --> 00:45:54.656 A:middle
And this time, it's
a little interesting.

00:45:54.656 --> 00:45:56.586 A:middle
First of all, there's
a bug in that line

00:45:56.586 --> 00:45:57.756 A:middle
where I'm setting
the finish time.

00:45:57.756 --> 00:46:00.636 A:middle
It really should be two-thirds
of the duration not two-thirds

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:57.756 --> 00:46:00.636 A:middle
It really should be two-thirds
of the duration not two-thirds

00:46:00.636 --> 00:46:02.986 A:middle
of the elapsed time,
but you get the drift.

00:46:03.326 --> 00:46:05.136 A:middle
And that's because
it's two stages.

00:46:05.136 --> 00:46:07.946 A:middle
I'm going to spend two-thirds of
my duration doing the first half

00:46:07.946 --> 00:46:11.766 A:middle
of my-- or first
two-thirds of my transition.

00:46:12.196 --> 00:46:14.686 A:middle
And then, I'm going to
move over to the next bit.

00:46:14.946 --> 00:46:17.236 A:middle
And the way again I'm going
to trigger that, is I'm going

00:46:17.236 --> 00:46:20.776 A:middle
to remove the behaviors which
is then going to cause me to go

00:46:20.776 --> 00:46:23.426 A:middle
into the DidPause
animator's delegate method.

00:46:24.466 --> 00:46:27.886 A:middle
I do the regular dance of
adding the children behaviors.

00:46:28.006 --> 00:46:31.546 A:middle
I do something different based
on whether or not I'm a--

00:46:31.836 --> 00:46:33.526 A:middle
whether or not I'm
presenting or dismissing,

00:46:33.526 --> 00:46:36.316 A:middle
that's why there's an IF
clause for the attach behavior

00:46:36.826 --> 00:46:37.666 A:middle
and then we're going to run.

00:46:38.516 --> 00:46:44.976 A:middle
[ Pause ]

00:46:45.476 --> 00:46:50.166 A:middle
So now, we've come to rest.

00:46:50.366 --> 00:46:51.526 A:middle
DidPause gets called.

00:46:51.526 --> 00:46:53.646 A:middle
Now, it either got called
because the system came

00:46:53.646 --> 00:46:57.076 A:middle
to a rest or because we
actually hit our elapsed time.

00:46:57.546 --> 00:46:58.956 A:middle
And we're going to
do the same thing.

00:46:58.956 --> 00:47:00.716 A:middle
Now we're using the attach
behavior a little bit

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:58.956 --> 00:47:00.716 A:middle
Now we're using the attach
behavior a little bit

00:47:00.716 --> 00:47:04.006 A:middle
as a semaphore here because the
dynamic animator DidPause is

00:47:04.006 --> 00:47:05.796 A:middle
saying, "Hey, do I have
an attach behavior?

00:47:05.826 --> 00:47:07.706 A:middle
If I do, then I need to go

00:47:07.706 --> 00:47:09.846 A:middle
into the second step
of my simulation."

00:47:10.886 --> 00:47:12.996 A:middle
So I'm going or remove
the attach behavior,

00:47:13.166 --> 00:47:15.516 A:middle
clear out that reference to it.

00:47:15.516 --> 00:47:19.056 A:middle
I'm going to add myself
back to the dynamic animator

00:47:19.636 --> 00:47:20.896 A:middle
and I'm going to
change my finish time.

00:47:21.376 --> 00:47:22.366 A:middle
Now time has elapsed,

00:47:22.596 --> 00:47:25.276 A:middle
so animator elapse time
is actually not going

00:47:25.276 --> 00:47:26.416 A:middle
to be 0 at this point.

00:47:26.866 --> 00:47:29.626 A:middle
And now, I only want it to
run the remaining one third

00:47:29.626 --> 00:47:31.976 A:middle
of the specified duration
of the transition.

00:47:32.476 --> 00:47:36.456 A:middle
At this point, since the
attachments disappear--

00:47:36.926 --> 00:47:38.656 A:middle
I should have pressed
that button before.

00:47:38.656 --> 00:47:42.276 A:middle
Since the attachments
disappear, when I run it,

00:47:42.336 --> 00:47:44.716 A:middle
I'm going to hit this point.

00:47:44.716 --> 00:47:48.986 A:middle
And now the collision delegate
is going to kick in because now,

00:47:49.576 --> 00:47:51.866 A:middle
I want to do something
after that first bounce.

00:47:52.116 --> 00:47:54.856 A:middle
I basically want to remove
the collision behavior so that

00:47:54.986 --> 00:47:58.256 A:middle
on the next drop, it's going to
drop all the way off the screen.

00:47:58.486 --> 00:48:01.086 A:middle
And I want to check

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:58.486 --> 00:48:01.086 A:middle
And I want to check

00:48:02.056 --> 00:48:04.496 A:middle
that I actually bounce
off the edge I care about.

00:48:04.946 --> 00:48:06.866 A:middle
So it's possible that I
might have hit the right edge

00:48:06.866 --> 00:48:09.626 A:middle
and I really want to
just trigger this code

00:48:09.626 --> 00:48:10.486 A:middle
if I hit the bottom.

00:48:11.296 --> 00:48:15.216 A:middle
And that's what that check is
doing with point.x &lt; xContact.

00:48:16.496 --> 00:48:19.536 A:middle
But if I'm there, I'm now going
to remove the collision behavior

00:48:20.676 --> 00:48:22.576 A:middle
and I'm going to
fall off the screen,

00:48:22.576 --> 00:48:24.346 A:middle
I'm going to get
back into DidPause.

00:48:24.346 --> 00:48:26.916 A:middle
Now this time, I'm going to
get in the DidPause definitely

00:48:26.916 --> 00:48:29.766 A:middle
because time has elapsed,
because basically,

00:48:29.766 --> 00:48:33.506 A:middle
that view has just fallen down
to the bottom of the earth.

00:48:33.506 --> 00:48:34.756 A:middle
It's not going to stop.

00:48:35.566 --> 00:48:38.816 A:middle
But I put in my time
check and so now I'm

00:48:39.216 --> 00:48:40.686 A:middle
in the final bits of the code.

00:48:40.686 --> 00:48:42.396 A:middle
I'm going to clean
up and you'll notice

00:48:42.696 --> 00:48:44.386 A:middle
that I call completeTransition.

00:48:44.996 --> 00:48:48.206 A:middle
That's critical and
that ends how

00:48:48.206 --> 00:48:51.816 A:middle
that particular present
dismiss was implemented.

00:48:52.556 --> 00:48:54.096 A:middle
So now let's talk about
the different one,

00:48:54.096 --> 00:48:55.046 A:middle
this one is interactive.

00:48:55.886 --> 00:48:58.026 A:middle
It's a drop shade
transition like I said.

00:48:58.296 --> 00:49:01.666 A:middle
This one can actually be used
the way it was implemented.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.296 --> 00:49:01.666 A:middle
This one can actually be used
the way it was implemented.

00:49:01.666 --> 00:49:03.276 A:middle
It's both the navigation
transition

00:49:03.366 --> 00:49:06.096 A:middle
and a regular present
dismiss transition.

00:49:07.126 --> 00:49:10.666 A:middle
It's a dynamic behavior
subclass that conforms

00:49:10.666 --> 00:49:13.936 A:middle
to both animated transitioning
and interactive transitioning.

00:49:14.356 --> 00:49:17.176 A:middle
Again, these are
protocols, so we're free

00:49:17.176 --> 00:49:20.046 A:middle
to basically have one object
implement the whole bunch

00:49:20.046 --> 00:49:21.336 A:middle
of them if it makes sense.

00:49:21.776 --> 00:49:24.856 A:middle
And in this case, it's
very convenient to do so.

00:49:25.596 --> 00:49:29.716 A:middle
The interactive portion of this
transition does not use dynamics

00:49:29.716 --> 00:49:29.986 A:middle
at all.

00:49:31.116 --> 00:49:35.426 A:middle
However, when the interaction
ends, we set up a dynamic finish

00:49:35.506 --> 00:49:40.006 A:middle
as it were and the dynamic
finish is actually going

00:49:40.006 --> 00:49:42.456 A:middle
to be calling out
to the interactive

00:49:42.506 --> 00:49:44.076 A:middle
transitioning methods.

00:49:44.866 --> 00:49:47.176 A:middle
And we do this for a
very specific reason.

00:49:47.736 --> 00:49:49.776 A:middle
We do this because that--

00:49:49.776 --> 00:49:55.066 A:middle
in that way, we are able
to drive auxiliary views

00:49:55.066 --> 00:49:57.766 A:middle
that might be participating
in a transition,

00:49:57.936 --> 00:49:59.606 A:middle
like for example,
the navigation bar.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:00.506 --> 00:50:03.386 A:middle
And it will synchronize in terms

00:50:03.386 --> 00:50:06.876 A:middle
of how complete the
transition is or not

00:50:06.876 --> 00:50:07.966 A:middle
with the dynamics
of the systems.

00:50:08.106 --> 00:50:10.446 A:middle
So that's a pretty
interesting technique.

00:50:11.086 --> 00:50:11.916 A:middle
We're going to continue

00:50:11.916 --> 00:50:14.976 A:middle
to use the same DidPause
mechanism that we used before.

00:50:15.346 --> 00:50:17.156 A:middle
So let me give you
a quick demo of that

00:50:17.946 --> 00:50:21.576 A:middle
and then we'll deconstruct
that one.

00:50:21.786 --> 00:50:24.806 A:middle
OK, basically, it's
pretty simple.

00:50:26.146 --> 00:50:28.986 A:middle
You'll see as I move
this with the gesture,

00:50:29.806 --> 00:50:31.076 A:middle
I can move it up or down.

00:50:31.546 --> 00:50:33.276 A:middle
If I cancel it, it goes back.

00:50:34.406 --> 00:50:35.966 A:middle
If you notice closely,

00:50:36.476 --> 00:50:40.966 A:middle
you'll see how the
navigation bar is kind

00:50:40.966 --> 00:50:43.396 A:middle
of fading in and out.

00:50:43.836 --> 00:50:45.156 A:middle
And if I go down, it kind of--

00:50:45.486 --> 00:50:47.216 A:middle
you'll notice that there
was a slight bounce

00:50:47.216 --> 00:50:49.916 A:middle
to it as it was settling.

00:50:49.916 --> 00:50:52.546 A:middle
And the navigation bar itself
was doing that as well.

00:50:53.166 --> 00:50:55.566 A:middle
That is a noninteractive
dismissal.

00:50:56.176 --> 00:51:01.196 A:middle
And just to prove my point,
I can make this a full

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:56.176 --> 00:51:01.196 A:middle
And just to prove my point,
I can make this a full

00:51:01.196 --> 00:51:03.026 A:middle
on presentation if I want to.

00:51:03.976 --> 00:51:08.626 A:middle
And exact-- with exactly the
same code, so that can drop

00:51:09.396 --> 00:51:11.366 A:middle
in or I can flip it up.

00:51:11.676 --> 00:51:13.606 A:middle
So that's what we're
going to deconstruct.

00:51:14.386 --> 00:51:15.476 A:middle
Let's do that quickly.

00:51:19.956 --> 00:51:22.636 A:middle
So before, the blogger's
get out there,

00:51:22.636 --> 00:51:25.086 A:middle
this is not some
leak of new hardware.

00:51:25.086 --> 00:51:26.486 A:middle
We don't have anything
looking like that.

00:51:26.486 --> 00:51:31.716 A:middle
I just couldn't fit all
the code on the screen.

00:51:31.896 --> 00:51:33.896 A:middle
So gesture starts.

00:51:35.336 --> 00:51:36.886 A:middle
This has nothing to
do with dynamics.

00:51:36.886 --> 00:51:41.666 A:middle
We are just recognizing a pan
gesture and when it starts,

00:51:41.666 --> 00:51:44.026 A:middle
we're going to say
Push View Controller.

00:51:44.026 --> 00:51:46.616 A:middle
And this case, I'm going
to through the sequence

00:51:46.616 --> 00:51:48.066 A:middle
that I demonstrated

00:51:48.066 --> 00:51:50.656 A:middle
as a navigation controller,
and that's it.

00:51:51.676 --> 00:51:54.206 A:middle
Now, I've wired things
up in such a way

00:51:54.496 --> 00:51:56.386 A:middle
that when I called
push view controller,

00:51:56.386 --> 00:51:57.996 A:middle
my navigation controller
delegate,

00:51:58.056 --> 00:51:59.566 A:middle
vended in animation controller,

00:51:59.566 --> 00:52:01.226 A:middle
vended in interaction
controller,

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:59.566 --> 00:52:01.226 A:middle
vended in interaction
controller,

00:52:01.226 --> 00:52:02.976 A:middle
and all those good
things were happening.

00:52:02.976 --> 00:52:06.066 A:middle
And then because of that,
the system called back

00:52:06.066 --> 00:52:07.316 A:middle
to the interaction controller

00:52:07.316 --> 00:52:09.316 A:middle
and said Start Interactive
Transition.

00:52:10.496 --> 00:52:13.406 A:middle
And we put the view
into the view hierarchy

00:52:13.406 --> 00:52:15.476 A:middle
which is what you
see with the gray box

00:52:16.366 --> 00:52:18.906 A:middle
and now we are continuing
to handle the gesture.

00:52:19.436 --> 00:52:22.466 A:middle
And as our finger moves
across the screen,

00:52:22.506 --> 00:52:26.586 A:middle
we are in fact pulling
the presented

00:52:26.586 --> 00:52:30.756 A:middle
or the push view controller's
view in the container hierarchy.

00:52:30.756 --> 00:52:34.256 A:middle
And we're calling out as we do
at update interactive transition

00:52:34.306 --> 00:52:36.946 A:middle
with the percent complete
which is based on the height

00:52:37.506 --> 00:52:40.426 A:middle
of the actual view
controller being presented.

00:52:41.406 --> 00:52:42.266 A:middle
So far so good.

00:52:42.776 --> 00:52:46.346 A:middle
Nothing particularly
new has happened

00:52:46.346 --> 00:52:49.306 A:middle
until we release our
finger from the screen.

00:52:49.706 --> 00:52:53.326 A:middle
At which point, we're
going to start building

00:52:53.326 --> 00:52:54.886 A:middle
up the dynamics of our system.

00:52:55.136 --> 00:52:58.256 A:middle
We're going to determine
based on velocity

00:52:58.256 --> 00:52:59.576 A:middle
and direction perhaps whether

00:52:59.576 --> 00:53:01.486 A:middle
or not the gesture
should cancel or not.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:59.576 --> 00:53:01.486 A:middle
or not the gesture
should cancel or not.

00:53:01.886 --> 00:53:05.936 A:middle
And then, we are going to create
a collision behavior using

00:53:06.206 --> 00:53:07.156 A:middle
boundary insets.

00:53:07.156 --> 00:53:09.536 A:middle
We're going to create an
attachment behavior this time

00:53:10.406 --> 00:53:12.086 A:middle
and we're going to
create an action block.

00:53:12.606 --> 00:53:15.156 A:middle
And what I'd like to focus
on this action block is

00:53:15.156 --> 00:53:16.516 A:middle
that action block is going

00:53:16.516 --> 00:53:19.206 A:middle
to call
UpdateInteractiveTransition.

00:53:20.046 --> 00:53:23.626 A:middle
So as this dynamics of the
system affects the view

00:53:23.626 --> 00:53:25.146 A:middle
as it bounces in and out,

00:53:25.526 --> 00:53:28.456 A:middle
we're going to compute how
close we are to the finish

00:53:28.456 --> 00:53:29.796 A:middle
and we're going to call out to

00:53:29.796 --> 00:53:33.976 A:middle
that UpdateInteractiveTransition
method

00:53:33.976 --> 00:53:35.346 A:middle
on the transition context.

00:53:35.826 --> 00:53:39.936 A:middle
When it's all over,
we're going to be

00:53:39.936 --> 00:53:42.106 A:middle
in the DidPause block again.

00:53:43.296 --> 00:53:47.086 A:middle
We're going to determine whether
or not it was canceled or not,

00:53:47.086 --> 00:53:48.046 A:middle
in which case we're either going

00:53:48.046 --> 00:53:49.816 A:middle
to call
CancelInteractiveTransition

00:53:49.816 --> 00:53:52.396 A:middle
or FinishInteractiveTransition
depending on the direction.

00:53:52.396 --> 00:53:53.506 A:middle
In this case, it's finish.

00:53:54.236 --> 00:53:55.386 A:middle
And then, again, we're going

00:53:55.386 --> 00:53:59.356 A:middle
to call the completeTransition
block on our method,

00:53:59.786 --> 00:54:01.736 A:middle
on the transition context.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:59.786 --> 00:54:01.736 A:middle
on the transition context.

00:54:03.116 --> 00:54:04.656 A:middle
So what did we learn here?

00:54:05.386 --> 00:54:06.556 A:middle
First of all, dynamics

00:54:06.556 --> 00:54:09.336 A:middle
and custom transitions are
compatible with each other.

00:54:09.336 --> 00:54:09.986 A:middle
They can be used.

00:54:09.986 --> 00:54:12.266 A:middle
In fact, we spend a lot of
times trying to make sure

00:54:12.266 --> 00:54:14.596 A:middle
that our APIs compose
well together.

00:54:15.676 --> 00:54:18.796 A:middle
As a rule of thumb,
it really pays off

00:54:18.796 --> 00:54:21.876 A:middle
to create composite behaviors
that get the function

00:54:21.876 --> 00:54:22.906 A:middle
that you're interested in.

00:54:23.646 --> 00:54:27.976 A:middle
We showed how you can create
complex dynamic transitions

00:54:28.346 --> 00:54:30.136 A:middle
using the dynamic
animator delegate,

00:54:30.306 --> 00:54:31.556 A:middle
the collision behavior delegate,

00:54:31.806 --> 00:54:33.996 A:middle
and actions on dynamic
behaviors.

00:54:36.136 --> 00:54:40.256 A:middle
A dynamic behavior subclass
can easily conform to one

00:54:40.256 --> 00:54:43.276 A:middle
or even both of the
transitioning protocols.

00:54:43.336 --> 00:54:46.176 A:middle
It makes a lot of sense to
do so because you can put all

00:54:46.176 --> 00:54:47.886 A:middle
of the logic in one place.

00:54:48.756 --> 00:54:50.996 A:middle
Duration is something
that needs to be thought

00:54:50.996 --> 00:54:52.606 A:middle
about when you're
doing transitions.

00:54:52.606 --> 00:54:56.336 A:middle
Again, a dynamic system doesn't
necessarily converge ever.

00:54:57.056 --> 00:55:00.496 A:middle
So you want to put
checks in place based

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:57.056 --> 00:55:00.496 A:middle
So you want to put
checks in place based

00:55:00.496 --> 00:55:03.246 A:middle
on your application logic
to ensure that it finishes.

00:55:04.566 --> 00:55:05.556 A:middle
And then, what's interesting is

00:55:05.556 --> 00:55:09.566 A:middle
that dynamic behavior
actions can actually be used

00:55:09.916 --> 00:55:12.986 A:middle
to drive the interactive
portion of a transition.

00:55:13.256 --> 00:55:15.356 A:middle
And that might not
be entirely obvious.

00:55:16.336 --> 00:55:18.306 A:middle
I'd like to make one
other point and that is,

00:55:18.306 --> 00:55:23.816 A:middle
is that if you're using
dynamics and you add behavior

00:55:23.816 --> 00:55:26.536 A:middle
to the dynamic animator
and nothing happens

00:55:27.696 --> 00:55:30.096 A:middle
which has happened to me
a few times, it's probably

00:55:30.096 --> 00:55:32.456 A:middle
because you didn't retain
your dynamic animator.

00:55:32.826 --> 00:55:34.086 A:middle
Don't let that happen to you.

00:55:34.766 --> 00:55:36.946 A:middle
So quick wrap up.

00:55:37.536 --> 00:55:41.576 A:middle
When you're using dynamics,
focus on what it is precisely

00:55:41.576 --> 00:55:44.396 A:middle
that you're really trying
to do in small pieces.

00:55:44.796 --> 00:55:49.096 A:middle
It really helps to build
complex dynamic interactions

00:55:49.096 --> 00:55:51.356 A:middle
and animations piece by piece.

00:55:51.636 --> 00:55:54.826 A:middle
In fact, we are iterating all
the time when we create this.

00:55:55.126 --> 00:55:56.926 A:middle
You're going to have different
constraints that you want

00:55:56.926 --> 00:55:59.916 A:middle
to take into account, duration,
interactivity, et cetera.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:00.956 --> 00:56:03.056 A:middle
There's all-- there's
a whole other bunch

00:56:03.056 --> 00:56:06.166 A:middle
of new animation APIs
that we added in iOS 7.

00:56:06.616 --> 00:56:08.936 A:middle
Those might be more
suitable in many cases.

00:56:08.936 --> 00:56:12.766 A:middle
For example, there's an
animate with duration API

00:56:13.086 --> 00:56:15.326 A:middle
that allows you to
implement kind

00:56:15.326 --> 00:56:17.346 A:middle
of a simple spring
animation as well.

00:56:17.776 --> 00:56:19.086 A:middle
So look at those two.

00:56:20.246 --> 00:56:26.536 A:middle
And then just go to town,
create awesome stuff.

00:56:26.756 --> 00:56:29.166 A:middle
All these sessions, I
believe have already happened

00:56:29.196 --> 00:56:30.816 A:middle
but you can look at
them on the videos.

00:56:31.056 --> 00:56:32.566 A:middle
They all talk about dynamics.

00:56:32.566 --> 00:56:35.106 A:middle
Some of them talk about custom
view controller transitions.

00:56:36.296 --> 00:56:36.696 A:middle
That's it.

00:56:37.116 --> 00:56:38.116 A:middle
[ Applause ]

00:56:38.116 --> 00:56:38.466 A:middle
Thank you.

00:56:39.016 --> 00:56:41.000 A:middle
[ Applause ]

